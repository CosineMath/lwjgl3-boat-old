/*
 * Copyright LWJGL. All rights reserved.
 * License terms: https://www.lwjgl.org/license
 * MACHINE GENERATED FILE, DO NOT EDIT
 */
package org.lwjgl.vulkan;

import javax.annotation.*;

import java.nio.*;

import org.lwjgl.*;
import org.lwjgl.system.*;

import static org.lwjgl.system.Checks.*;
import static org.lwjgl.system.MemoryUtil.*;
import static org.lwjgl.system.MemoryStack.*;

import static org.lwjgl.vulkan.VK10.*;
import static org.lwjgl.vulkan.VK11.*;

/**
 * Structure specifying physical device properties for functionality promoted to Vulkan 1.1.
 * 
 * <h5>Description</h5>
 * 
 * <p>The members of {@link VkPhysicalDeviceVulkan11Properties} <b>must</b> have the same values as the corresponding members of {@link VkPhysicalDeviceIDProperties}, {@link VkPhysicalDeviceSubgroupProperties}, {@link VkPhysicalDevicePointClippingProperties}, {@link VkPhysicalDeviceMultiviewProperties}, {@link VkPhysicalDeviceProtectedMemoryProperties}, and {@link VkPhysicalDeviceMaintenance3Properties}.</p>
 * 
 * <h5>Valid Usage (Implicit)</h5>
 * 
 * <ul>
 * <li>{@code sType} <b>must</b> be {@link VK12#VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES}</li>
 * <li>{@code pointClippingBehavior} <b>must</b> be a valid {@code VkPointClippingBehavior} value</li>
 * </ul>
 * 
 * <h3>Member documentation</h3>
 * 
 * <ul>
 * <li>{@code deviceUUID[VK_UUID_SIZE]} &ndash; an array of {@link VK10#VK_UUID_SIZE UUID_SIZE} {@code uint8_t} values representing a universally unique identifier for the device.</li>
 * <li>{@code driverUUID[VK_UUID_SIZE]} &ndash; an array of {@link VK10#VK_UUID_SIZE UUID_SIZE} {@code uint8_t} values representing a universally unique identifier for the driver build in use by the device.</li>
 * <li>{@code deviceLUID[VK_LUID_SIZE]} &ndash; an array of {@link VK11#VK_LUID_SIZE LUID_SIZE} {@code uint8_t} values representing a locally unique identifier for the device.</li>
 * <li>{@code deviceNodeMask} &ndash; a {@code uint32_t} bitfield identifying the node within a linked device adapter corresponding to the device.</li>
 * <li>{@code deviceLUIDValid} &ndash; a boolean value that will be {@link VK10#VK_TRUE TRUE} if {@code deviceLUID} contains a valid LUID and {@code deviceNodeMask} contains a valid node mask, and {@link VK10#VK_FALSE FALSE} if they do not.</li>
 * <li>{@code subgroupSize} &ndash; the default number of invocations in each subgroup. {@code subgroupSize} is at least 1 if any of the physical device&#8217;s queues support {@link VK10#VK_QUEUE_GRAPHICS_BIT QUEUE_GRAPHICS_BIT} or {@link VK10#VK_QUEUE_COMPUTE_BIT QUEUE_COMPUTE_BIT}. {@code subgroupSize} is a power-of-two.</li>
 * <li>{@code subgroupSupportedStages} &ndash; a bitfield of {@code VkShaderStageFlagBits} describing the shader stages that subgroup operations are supported in. {@code subgroupSupportedStages} will have the {@link VK10#VK_SHADER_STAGE_COMPUTE_BIT SHADER_STAGE_COMPUTE_BIT} bit set if any of the physical device&#8217;s queues support {@link VK10#VK_QUEUE_COMPUTE_BIT QUEUE_COMPUTE_BIT}.</li>
 * <li>{@code subgroupSupportedOperations} &ndash; a bitmask of {@code VkSubgroupFeatureFlagBits} specifying the sets of subgroup operations supported on this device. {@code subgroupSupportedOperations} will have the {@link VK11#VK_SUBGROUP_FEATURE_BASIC_BIT SUBGROUP_FEATURE_BASIC_BIT} bit set if any of the physical device&#8217;s queues support {@link VK10#VK_QUEUE_GRAPHICS_BIT QUEUE_GRAPHICS_BIT} or {@link VK10#VK_QUEUE_COMPUTE_BIT QUEUE_COMPUTE_BIT}.</li>
 * <li>{@code subgroupQuadOperationsInAllStages} &ndash; a boolean specifying whether <a target="_blank" href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#features-subgroup-quad">quad subgroup operations</a> are available in all stages, or are restricted to fragment and compute stages.</li>
 * <li>{@code pointClippingBehavior} &ndash; a {@code VkPointClippingBehavior} value specifying the point clipping behavior supported by the implementation.</li>
 * <li>{@code maxMultiviewViewCount} &ndash; one greater than the maximum view index that <b>can</b> be used in a subpass.</li>
 * <li>{@code maxMultiviewInstanceIndex} &ndash; the maximum valid value of instance index allowed to be generated by a drawing command recorded within a subpass of a multiview render pass instance.</li>
 * <li>{@code protectedNoFault} &ndash; specifies the behavior of the implementation when <a target="_blank" href="https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#memory-protected-access-rules">protected memory access rules</a> are broken. If {@code protectedNoFault} is {@link VK10#VK_TRUE TRUE}, breaking those rules will not result in process termination or device loss.</li>
 * <li>{@code maxPerSetDescriptors} &ndash; a maximum number of descriptors (summed over all descriptor types) in a single descriptor set that is guaranteed to satisfy any implementation-dependent constraints on the size of a descriptor set itself. Applications <b>can</b> query whether a descriptor set that goes beyond this limit is supported using {@link VK11#vkGetDescriptorSetLayoutSupport GetDescriptorSetLayoutSupport}.</li>
 * <li>{@code maxMemoryAllocationSize} &ndash; the maximum size of a memory allocation that <b>can</b> be created, even if there is more space available in the heap.</li>
 * </ul>
 * 
 * <h3>Layout</h3>
 * 
 * <pre><code>
 * struct VkPhysicalDeviceVulkan11Properties {
 *     VkStructureType sType;
 *     void * pNext;
 *     uint8_t deviceUUID[VK_UUID_SIZE];
 *     uint8_t driverUUID[VK_UUID_SIZE];
 *     uint8_t deviceLUID[VK_LUID_SIZE];
 *     uint32_t deviceNodeMask;
 *     VkBool32 deviceLUIDValid;
 *     uint32_t subgroupSize;
 *     VkShaderStageFlags subgroupSupportedStages;
 *     VkSubgroupFeatureFlags subgroupSupportedOperations;
 *     VkBool32 subgroupQuadOperationsInAllStages;
 *     VkPointClippingBehavior pointClippingBehavior;
 *     uint32_t maxMultiviewViewCount;
 *     uint32_t maxMultiviewInstanceIndex;
 *     VkBool32 protectedNoFault;
 *     uint32_t maxPerSetDescriptors;
 *     VkDeviceSize maxMemoryAllocationSize;
 * }</code></pre>
 */
public class VkPhysicalDeviceVulkan11Properties extends Struct implements NativeResource {

    /** The struct size in bytes. */
    public static final int SIZEOF;

    /** The struct alignment in bytes. */
    public static final int ALIGNOF;

    /** The struct member offsets. */
    public static final int
        STYPE,
        PNEXT,
        DEVICEUUID,
        DRIVERUUID,
        DEVICELUID,
        DEVICENODEMASK,
        DEVICELUIDVALID,
        SUBGROUPSIZE,
        SUBGROUPSUPPORTEDSTAGES,
        SUBGROUPSUPPORTEDOPERATIONS,
        SUBGROUPQUADOPERATIONSINALLSTAGES,
        POINTCLIPPINGBEHAVIOR,
        MAXMULTIVIEWVIEWCOUNT,
        MAXMULTIVIEWINSTANCEINDEX,
        PROTECTEDNOFAULT,
        MAXPERSETDESCRIPTORS,
        MAXMEMORYALLOCATIONSIZE;

    static {
        Layout layout = __struct(
            __member(4),
            __member(POINTER_SIZE),
            __array(1, VK_UUID_SIZE),
            __array(1, VK_UUID_SIZE),
            __array(1, VK_LUID_SIZE),
            __member(4),
            __member(4),
            __member(4),
            __member(4),
            __member(4),
            __member(4),
            __member(4),
            __member(4),
            __member(4),
            __member(4),
            __member(4),
            __member(8)
        );

        SIZEOF = layout.getSize();
        ALIGNOF = layout.getAlignment();

        STYPE = layout.offsetof(0);
        PNEXT = layout.offsetof(1);
        DEVICEUUID = layout.offsetof(2);
        DRIVERUUID = layout.offsetof(3);
        DEVICELUID = layout.offsetof(4);
        DEVICENODEMASK = layout.offsetof(5);
        DEVICELUIDVALID = layout.offsetof(6);
        SUBGROUPSIZE = layout.offsetof(7);
        SUBGROUPSUPPORTEDSTAGES = layout.offsetof(8);
        SUBGROUPSUPPORTEDOPERATIONS = layout.offsetof(9);
        SUBGROUPQUADOPERATIONSINALLSTAGES = layout.offsetof(10);
        POINTCLIPPINGBEHAVIOR = layout.offsetof(11);
        MAXMULTIVIEWVIEWCOUNT = layout.offsetof(12);
        MAXMULTIVIEWINSTANCEINDEX = layout.offsetof(13);
        PROTECTEDNOFAULT = layout.offsetof(14);
        MAXPERSETDESCRIPTORS = layout.offsetof(15);
        MAXMEMORYALLOCATIONSIZE = layout.offsetof(16);
    }

    /**
     * Creates a {@code VkPhysicalDeviceVulkan11Properties} instance at the current position of the specified {@link ByteBuffer} container. Changes to the buffer's content will be
     * visible to the struct instance and vice versa.
     *
     * <p>The created instance holds a strong reference to the container object.</p>
     */
    public VkPhysicalDeviceVulkan11Properties(ByteBuffer container) {
        super(memAddress(container), __checkContainer(container, SIZEOF));
    }

    @Override
    public int sizeof() { return SIZEOF; }

    /** Returns the value of the {@code sType} field. */
    @NativeType("VkStructureType")
    public int sType() { return nsType(address()); }
    /** Returns the value of the {@code pNext} field. */
    @NativeType("void *")
    public long pNext() { return npNext(address()); }
    /** Returns a {@link ByteBuffer} view of the {@code deviceUUID} field. */
    @NativeType("uint8_t[VK_UUID_SIZE]")
    public ByteBuffer deviceUUID() { return ndeviceUUID(address()); }
    /** Returns the value at the specified index of the {@code deviceUUID} field. */
    @NativeType("uint8_t")
    public byte deviceUUID(int index) { return ndeviceUUID(address(), index); }
    /** Returns a {@link ByteBuffer} view of the {@code driverUUID} field. */
    @NativeType("uint8_t[VK_UUID_SIZE]")
    public ByteBuffer driverUUID() { return ndriverUUID(address()); }
    /** Returns the value at the specified index of the {@code driverUUID} field. */
    @NativeType("uint8_t")
    public byte driverUUID(int index) { return ndriverUUID(address(), index); }
    /** Returns a {@link ByteBuffer} view of the {@code deviceLUID} field. */
    @NativeType("uint8_t[VK_LUID_SIZE]")
    public ByteBuffer deviceLUID() { return ndeviceLUID(address()); }
    /** Returns the value at the specified index of the {@code deviceLUID} field. */
    @NativeType("uint8_t")
    public byte deviceLUID(int index) { return ndeviceLUID(address(), index); }
    /** Returns the value of the {@code deviceNodeMask} field. */
    @NativeType("uint32_t")
    public int deviceNodeMask() { return ndeviceNodeMask(address()); }
    /** Returns the value of the {@code deviceLUIDValid} field. */
    @NativeType("VkBool32")
    public boolean deviceLUIDValid() { return ndeviceLUIDValid(address()) != 0; }
    /** Returns the value of the {@code subgroupSize} field. */
    @NativeType("uint32_t")
    public int subgroupSize() { return nsubgroupSize(address()); }
    /** Returns the value of the {@code subgroupSupportedStages} field. */
    @NativeType("VkShaderStageFlags")
    public int subgroupSupportedStages() { return nsubgroupSupportedStages(address()); }
    /** Returns the value of the {@code subgroupSupportedOperations} field. */
    @NativeType("VkSubgroupFeatureFlags")
    public int subgroupSupportedOperations() { return nsubgroupSupportedOperations(address()); }
    /** Returns the value of the {@code subgroupQuadOperationsInAllStages} field. */
    @NativeType("VkBool32")
    public boolean subgroupQuadOperationsInAllStages() { return nsubgroupQuadOperationsInAllStages(address()) != 0; }
    /** Returns the value of the {@code pointClippingBehavior} field. */
    @NativeType("VkPointClippingBehavior")
    public int pointClippingBehavior() { return npointClippingBehavior(address()); }
    /** Returns the value of the {@code maxMultiviewViewCount} field. */
    @NativeType("uint32_t")
    public int maxMultiviewViewCount() { return nmaxMultiviewViewCount(address()); }
    /** Returns the value of the {@code maxMultiviewInstanceIndex} field. */
    @NativeType("uint32_t")
    public int maxMultiviewInstanceIndex() { return nmaxMultiviewInstanceIndex(address()); }
    /** Returns the value of the {@code protectedNoFault} field. */
    @NativeType("VkBool32")
    public boolean protectedNoFault() { return nprotectedNoFault(address()) != 0; }
    /** Returns the value of the {@code maxPerSetDescriptors} field. */
    @NativeType("uint32_t")
    public int maxPerSetDescriptors() { return nmaxPerSetDescriptors(address()); }
    /** Returns the value of the {@code maxMemoryAllocationSize} field. */
    @NativeType("VkDeviceSize")
    public long maxMemoryAllocationSize() { return nmaxMemoryAllocationSize(address()); }

    /** Sets the specified value to the {@code sType} field. */
    public VkPhysicalDeviceVulkan11Properties sType(@NativeType("VkStructureType") int value) { nsType(address(), value); return this; }
    /** Sets the specified value to the {@code pNext} field. */
    public VkPhysicalDeviceVulkan11Properties pNext(@NativeType("void *") long value) { npNext(address(), value); return this; }
    /** Copies the specified {@link ByteBuffer} to the {@code deviceUUID} field. */
    public VkPhysicalDeviceVulkan11Properties deviceUUID(@NativeType("uint8_t[VK_UUID_SIZE]") ByteBuffer value) { ndeviceUUID(address(), value); return this; }
    /** Sets the specified value at the specified index of the {@code deviceUUID} field. */
    public VkPhysicalDeviceVulkan11Properties deviceUUID(int index, @NativeType("uint8_t") byte value) { ndeviceUUID(address(), index, value); return this; }
    /** Copies the specified {@link ByteBuffer} to the {@code driverUUID} field. */
    public VkPhysicalDeviceVulkan11Properties driverUUID(@NativeType("uint8_t[VK_UUID_SIZE]") ByteBuffer value) { ndriverUUID(address(), value); return this; }
    /** Sets the specified value at the specified index of the {@code driverUUID} field. */
    public VkPhysicalDeviceVulkan11Properties driverUUID(int index, @NativeType("uint8_t") byte value) { ndriverUUID(address(), index, value); return this; }
    /** Copies the specified {@link ByteBuffer} to the {@code deviceLUID} field. */
    public VkPhysicalDeviceVulkan11Properties deviceLUID(@NativeType("uint8_t[VK_LUID_SIZE]") ByteBuffer value) { ndeviceLUID(address(), value); return this; }
    /** Sets the specified value at the specified index of the {@code deviceLUID} field. */
    public VkPhysicalDeviceVulkan11Properties deviceLUID(int index, @NativeType("uint8_t") byte value) { ndeviceLUID(address(), index, value); return this; }
    /** Sets the specified value to the {@code deviceNodeMask} field. */
    public VkPhysicalDeviceVulkan11Properties deviceNodeMask(@NativeType("uint32_t") int value) { ndeviceNodeMask(address(), value); return this; }
    /** Sets the specified value to the {@code deviceLUIDValid} field. */
    public VkPhysicalDeviceVulkan11Properties deviceLUIDValid(@NativeType("VkBool32") boolean value) { ndeviceLUIDValid(address(), value ? 1 : 0); return this; }
    /** Sets the specified value to the {@code subgroupSize} field. */
    public VkPhysicalDeviceVulkan11Properties subgroupSize(@NativeType("uint32_t") int value) { nsubgroupSize(address(), value); return this; }
    /** Sets the specified value to the {@code subgroupSupportedStages} field. */
    public VkPhysicalDeviceVulkan11Properties subgroupSupportedStages(@NativeType("VkShaderStageFlags") int value) { nsubgroupSupportedStages(address(), value); return this; }
    /** Sets the specified value to the {@code subgroupSupportedOperations} field. */
    public VkPhysicalDeviceVulkan11Properties subgroupSupportedOperations(@NativeType("VkSubgroupFeatureFlags") int value) { nsubgroupSupportedOperations(address(), value); return this; }
    /** Sets the specified value to the {@code subgroupQuadOperationsInAllStages} field. */
    public VkPhysicalDeviceVulkan11Properties subgroupQuadOperationsInAllStages(@NativeType("VkBool32") boolean value) { nsubgroupQuadOperationsInAllStages(address(), value ? 1 : 0); return this; }
    /** Sets the specified value to the {@code pointClippingBehavior} field. */
    public VkPhysicalDeviceVulkan11Properties pointClippingBehavior(@NativeType("VkPointClippingBehavior") int value) { npointClippingBehavior(address(), value); return this; }
    /** Sets the specified value to the {@code maxMultiviewViewCount} field. */
    public VkPhysicalDeviceVulkan11Properties maxMultiviewViewCount(@NativeType("uint32_t") int value) { nmaxMultiviewViewCount(address(), value); return this; }
    /** Sets the specified value to the {@code maxMultiviewInstanceIndex} field. */
    public VkPhysicalDeviceVulkan11Properties maxMultiviewInstanceIndex(@NativeType("uint32_t") int value) { nmaxMultiviewInstanceIndex(address(), value); return this; }
    /** Sets the specified value to the {@code protectedNoFault} field. */
    public VkPhysicalDeviceVulkan11Properties protectedNoFault(@NativeType("VkBool32") boolean value) { nprotectedNoFault(address(), value ? 1 : 0); return this; }
    /** Sets the specified value to the {@code maxPerSetDescriptors} field. */
    public VkPhysicalDeviceVulkan11Properties maxPerSetDescriptors(@NativeType("uint32_t") int value) { nmaxPerSetDescriptors(address(), value); return this; }
    /** Sets the specified value to the {@code maxMemoryAllocationSize} field. */
    public VkPhysicalDeviceVulkan11Properties maxMemoryAllocationSize(@NativeType("VkDeviceSize") long value) { nmaxMemoryAllocationSize(address(), value); return this; }

    /** Initializes this struct with the specified values. */
    public VkPhysicalDeviceVulkan11Properties set(
        int sType,
        long pNext,
        ByteBuffer deviceUUID,
        ByteBuffer driverUUID,
        ByteBuffer deviceLUID,
        int deviceNodeMask,
        boolean deviceLUIDValid,
        int subgroupSize,
        int subgroupSupportedStages,
        int subgroupSupportedOperations,
        boolean subgroupQuadOperationsInAllStages,
        int pointClippingBehavior,
        int maxMultiviewViewCount,
        int maxMultiviewInstanceIndex,
        boolean protectedNoFault,
        int maxPerSetDescriptors,
        long maxMemoryAllocationSize
    ) {
        sType(sType);
        pNext(pNext);
        deviceUUID(deviceUUID);
        driverUUID(driverUUID);
        deviceLUID(deviceLUID);
        deviceNodeMask(deviceNodeMask);
        deviceLUIDValid(deviceLUIDValid);
        subgroupSize(subgroupSize);
        subgroupSupportedStages(subgroupSupportedStages);
        subgroupSupportedOperations(subgroupSupportedOperations);
        subgroupQuadOperationsInAllStages(subgroupQuadOperationsInAllStages);
        pointClippingBehavior(pointClippingBehavior);
        maxMultiviewViewCount(maxMultiviewViewCount);
        maxMultiviewInstanceIndex(maxMultiviewInstanceIndex);
        protectedNoFault(protectedNoFault);
        maxPerSetDescriptors(maxPerSetDescriptors);
        maxMemoryAllocationSize(maxMemoryAllocationSize);

        return this;
    }

    /**
     * Copies the specified struct data to this struct.
     *
     * @param src the source struct
     *
     * @return this struct
     */
    public VkPhysicalDeviceVulkan11Properties set(VkPhysicalDeviceVulkan11Properties src) {
        memCopy(src.address(), address(), SIZEOF);
        return this;
    }

    // -----------------------------------

    /** Returns a new {@code VkPhysicalDeviceVulkan11Properties} instance allocated with {@link MemoryUtil#memAlloc memAlloc}. The instance must be explicitly freed. */
    public static VkPhysicalDeviceVulkan11Properties malloc() {
        return wrap(VkPhysicalDeviceVulkan11Properties.class, nmemAllocChecked(SIZEOF));
    }

    /** Returns a new {@code VkPhysicalDeviceVulkan11Properties} instance allocated with {@link MemoryUtil#memCalloc memCalloc}. The instance must be explicitly freed. */
    public static VkPhysicalDeviceVulkan11Properties calloc() {
        return wrap(VkPhysicalDeviceVulkan11Properties.class, nmemCallocChecked(1, SIZEOF));
    }

    /** Returns a new {@code VkPhysicalDeviceVulkan11Properties} instance allocated with {@link BufferUtils}. */
    public static VkPhysicalDeviceVulkan11Properties create() {
        ByteBuffer container = BufferUtils.createByteBuffer(SIZEOF);
        return wrap(VkPhysicalDeviceVulkan11Properties.class, memAddress(container), container);
    }

    /** Returns a new {@code VkPhysicalDeviceVulkan11Properties} instance for the specified memory address. */
    public static VkPhysicalDeviceVulkan11Properties create(long address) {
        return wrap(VkPhysicalDeviceVulkan11Properties.class, address);
    }

    /** Like {@link #create(long) create}, but returns {@code null} if {@code address} is {@code NULL}. */
    @Nullable
    public static VkPhysicalDeviceVulkan11Properties createSafe(long address) {
        return address == NULL ? null : wrap(VkPhysicalDeviceVulkan11Properties.class, address);
    }

    /**
     * Returns a new {@link VkPhysicalDeviceVulkan11Properties.Buffer} instance allocated with {@link MemoryUtil#memAlloc memAlloc}. The instance must be explicitly freed.
     *
     * @param capacity the buffer capacity
     */
    public static VkPhysicalDeviceVulkan11Properties.Buffer malloc(int capacity) {
        return wrap(Buffer.class, nmemAllocChecked(__checkMalloc(capacity, SIZEOF)), capacity);
    }

    /**
     * Returns a new {@link VkPhysicalDeviceVulkan11Properties.Buffer} instance allocated with {@link MemoryUtil#memCalloc memCalloc}. The instance must be explicitly freed.
     *
     * @param capacity the buffer capacity
     */
    public static VkPhysicalDeviceVulkan11Properties.Buffer calloc(int capacity) {
        return wrap(Buffer.class, nmemCallocChecked(capacity, SIZEOF), capacity);
    }

    /**
     * Returns a new {@link VkPhysicalDeviceVulkan11Properties.Buffer} instance allocated with {@link BufferUtils}.
     *
     * @param capacity the buffer capacity
     */
    public static VkPhysicalDeviceVulkan11Properties.Buffer create(int capacity) {
        ByteBuffer container = __create(capacity, SIZEOF);
        return wrap(Buffer.class, memAddress(container), capacity, container);
    }

    /**
     * Create a {@link VkPhysicalDeviceVulkan11Properties.Buffer} instance at the specified memory.
     *
     * @param address  the memory address
     * @param capacity the buffer capacity
     */
    public static VkPhysicalDeviceVulkan11Properties.Buffer create(long address, int capacity) {
        return wrap(Buffer.class, address, capacity);
    }

    /** Like {@link #create(long, int) create}, but returns {@code null} if {@code address} is {@code NULL}. */
    @Nullable
    public static VkPhysicalDeviceVulkan11Properties.Buffer createSafe(long address, int capacity) {
        return address == NULL ? null : wrap(Buffer.class, address, capacity);
    }

    // -----------------------------------

    /** Returns a new {@code VkPhysicalDeviceVulkan11Properties} instance allocated on the thread-local {@link MemoryStack}. */
    public static VkPhysicalDeviceVulkan11Properties mallocStack() {
        return mallocStack(stackGet());
    }

    /** Returns a new {@code VkPhysicalDeviceVulkan11Properties} instance allocated on the thread-local {@link MemoryStack} and initializes all its bits to zero. */
    public static VkPhysicalDeviceVulkan11Properties callocStack() {
        return callocStack(stackGet());
    }

    /**
     * Returns a new {@code VkPhysicalDeviceVulkan11Properties} instance allocated on the specified {@link MemoryStack}.
     *
     * @param stack the stack from which to allocate
     */
    public static VkPhysicalDeviceVulkan11Properties mallocStack(MemoryStack stack) {
        return wrap(VkPhysicalDeviceVulkan11Properties.class, stack.nmalloc(ALIGNOF, SIZEOF));
    }

    /**
     * Returns a new {@code VkPhysicalDeviceVulkan11Properties} instance allocated on the specified {@link MemoryStack} and initializes all its bits to zero.
     *
     * @param stack the stack from which to allocate
     */
    public static VkPhysicalDeviceVulkan11Properties callocStack(MemoryStack stack) {
        return wrap(VkPhysicalDeviceVulkan11Properties.class, stack.ncalloc(ALIGNOF, 1, SIZEOF));
    }

    /**
     * Returns a new {@link VkPhysicalDeviceVulkan11Properties.Buffer} instance allocated on the thread-local {@link MemoryStack}.
     *
     * @param capacity the buffer capacity
     */
    public static VkPhysicalDeviceVulkan11Properties.Buffer mallocStack(int capacity) {
        return mallocStack(capacity, stackGet());
    }

    /**
     * Returns a new {@link VkPhysicalDeviceVulkan11Properties.Buffer} instance allocated on the thread-local {@link MemoryStack} and initializes all its bits to zero.
     *
     * @param capacity the buffer capacity
     */
    public static VkPhysicalDeviceVulkan11Properties.Buffer callocStack(int capacity) {
        return callocStack(capacity, stackGet());
    }

    /**
     * Returns a new {@link VkPhysicalDeviceVulkan11Properties.Buffer} instance allocated on the specified {@link MemoryStack}.
     *
     * @param stack the stack from which to allocate
     * @param capacity the buffer capacity
     */
    public static VkPhysicalDeviceVulkan11Properties.Buffer mallocStack(int capacity, MemoryStack stack) {
        return wrap(Buffer.class, stack.nmalloc(ALIGNOF, capacity * SIZEOF), capacity);
    }

    /**
     * Returns a new {@link VkPhysicalDeviceVulkan11Properties.Buffer} instance allocated on the specified {@link MemoryStack} and initializes all its bits to zero.
     *
     * @param stack the stack from which to allocate
     * @param capacity the buffer capacity
     */
    public static VkPhysicalDeviceVulkan11Properties.Buffer callocStack(int capacity, MemoryStack stack) {
        return wrap(Buffer.class, stack.ncalloc(ALIGNOF, capacity, SIZEOF), capacity);
    }

    // -----------------------------------

    /** Unsafe version of {@link #sType}. */
    public static int nsType(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.STYPE); }
    /** Unsafe version of {@link #pNext}. */
    public static long npNext(long struct) { return memGetAddress(struct + VkPhysicalDeviceVulkan11Properties.PNEXT); }
    /** Unsafe version of {@link #deviceUUID}. */
    public static ByteBuffer ndeviceUUID(long struct) { return memByteBuffer(struct + VkPhysicalDeviceVulkan11Properties.DEVICEUUID, VK_UUID_SIZE); }
    /** Unsafe version of {@link #deviceUUID(int) deviceUUID}. */
    public static byte ndeviceUUID(long struct, int index) {
        return UNSAFE.getByte(null, struct + VkPhysicalDeviceVulkan11Properties.DEVICEUUID + check(index, VK_UUID_SIZE) * 1);
    }
    /** Unsafe version of {@link #driverUUID}. */
    public static ByteBuffer ndriverUUID(long struct) { return memByteBuffer(struct + VkPhysicalDeviceVulkan11Properties.DRIVERUUID, VK_UUID_SIZE); }
    /** Unsafe version of {@link #driverUUID(int) driverUUID}. */
    public static byte ndriverUUID(long struct, int index) {
        return UNSAFE.getByte(null, struct + VkPhysicalDeviceVulkan11Properties.DRIVERUUID + check(index, VK_UUID_SIZE) * 1);
    }
    /** Unsafe version of {@link #deviceLUID}. */
    public static ByteBuffer ndeviceLUID(long struct) { return memByteBuffer(struct + VkPhysicalDeviceVulkan11Properties.DEVICELUID, VK_LUID_SIZE); }
    /** Unsafe version of {@link #deviceLUID(int) deviceLUID}. */
    public static byte ndeviceLUID(long struct, int index) {
        return UNSAFE.getByte(null, struct + VkPhysicalDeviceVulkan11Properties.DEVICELUID + check(index, VK_LUID_SIZE) * 1);
    }
    /** Unsafe version of {@link #deviceNodeMask}. */
    public static int ndeviceNodeMask(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.DEVICENODEMASK); }
    /** Unsafe version of {@link #deviceLUIDValid}. */
    public static int ndeviceLUIDValid(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.DEVICELUIDVALID); }
    /** Unsafe version of {@link #subgroupSize}. */
    public static int nsubgroupSize(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.SUBGROUPSIZE); }
    /** Unsafe version of {@link #subgroupSupportedStages}. */
    public static int nsubgroupSupportedStages(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.SUBGROUPSUPPORTEDSTAGES); }
    /** Unsafe version of {@link #subgroupSupportedOperations}. */
    public static int nsubgroupSupportedOperations(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.SUBGROUPSUPPORTEDOPERATIONS); }
    /** Unsafe version of {@link #subgroupQuadOperationsInAllStages}. */
    public static int nsubgroupQuadOperationsInAllStages(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.SUBGROUPQUADOPERATIONSINALLSTAGES); }
    /** Unsafe version of {@link #pointClippingBehavior}. */
    public static int npointClippingBehavior(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.POINTCLIPPINGBEHAVIOR); }
    /** Unsafe version of {@link #maxMultiviewViewCount}. */
    public static int nmaxMultiviewViewCount(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.MAXMULTIVIEWVIEWCOUNT); }
    /** Unsafe version of {@link #maxMultiviewInstanceIndex}. */
    public static int nmaxMultiviewInstanceIndex(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.MAXMULTIVIEWINSTANCEINDEX); }
    /** Unsafe version of {@link #protectedNoFault}. */
    public static int nprotectedNoFault(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.PROTECTEDNOFAULT); }
    /** Unsafe version of {@link #maxPerSetDescriptors}. */
    public static int nmaxPerSetDescriptors(long struct) { return UNSAFE.getInt(null, struct + VkPhysicalDeviceVulkan11Properties.MAXPERSETDESCRIPTORS); }
    /** Unsafe version of {@link #maxMemoryAllocationSize}. */
    public static long nmaxMemoryAllocationSize(long struct) { return UNSAFE.getLong(null, struct + VkPhysicalDeviceVulkan11Properties.MAXMEMORYALLOCATIONSIZE); }

    /** Unsafe version of {@link #sType(int) sType}. */
    public static void nsType(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.STYPE, value); }
    /** Unsafe version of {@link #pNext(long) pNext}. */
    public static void npNext(long struct, long value) { memPutAddress(struct + VkPhysicalDeviceVulkan11Properties.PNEXT, value); }
    /** Unsafe version of {@link #deviceUUID(ByteBuffer) deviceUUID}. */
    public static void ndeviceUUID(long struct, ByteBuffer value) {
        if (CHECKS) { checkGT(value, VK_UUID_SIZE); }
        memCopy(memAddress(value), struct + VkPhysicalDeviceVulkan11Properties.DEVICEUUID, value.remaining() * 1);
    }
    /** Unsafe version of {@link #deviceUUID(int, byte) deviceUUID}. */
    public static void ndeviceUUID(long struct, int index, byte value) {
        UNSAFE.putByte(null, struct + VkPhysicalDeviceVulkan11Properties.DEVICEUUID + check(index, VK_UUID_SIZE) * 1, value);
    }
    /** Unsafe version of {@link #driverUUID(ByteBuffer) driverUUID}. */
    public static void ndriverUUID(long struct, ByteBuffer value) {
        if (CHECKS) { checkGT(value, VK_UUID_SIZE); }
        memCopy(memAddress(value), struct + VkPhysicalDeviceVulkan11Properties.DRIVERUUID, value.remaining() * 1);
    }
    /** Unsafe version of {@link #driverUUID(int, byte) driverUUID}. */
    public static void ndriverUUID(long struct, int index, byte value) {
        UNSAFE.putByte(null, struct + VkPhysicalDeviceVulkan11Properties.DRIVERUUID + check(index, VK_UUID_SIZE) * 1, value);
    }
    /** Unsafe version of {@link #deviceLUID(ByteBuffer) deviceLUID}. */
    public static void ndeviceLUID(long struct, ByteBuffer value) {
        if (CHECKS) { checkGT(value, VK_LUID_SIZE); }
        memCopy(memAddress(value), struct + VkPhysicalDeviceVulkan11Properties.DEVICELUID, value.remaining() * 1);
    }
    /** Unsafe version of {@link #deviceLUID(int, byte) deviceLUID}. */
    public static void ndeviceLUID(long struct, int index, byte value) {
        UNSAFE.putByte(null, struct + VkPhysicalDeviceVulkan11Properties.DEVICELUID + check(index, VK_LUID_SIZE) * 1, value);
    }
    /** Unsafe version of {@link #deviceNodeMask(int) deviceNodeMask}. */
    public static void ndeviceNodeMask(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.DEVICENODEMASK, value); }
    /** Unsafe version of {@link #deviceLUIDValid(boolean) deviceLUIDValid}. */
    public static void ndeviceLUIDValid(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.DEVICELUIDVALID, value); }
    /** Unsafe version of {@link #subgroupSize(int) subgroupSize}. */
    public static void nsubgroupSize(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.SUBGROUPSIZE, value); }
    /** Unsafe version of {@link #subgroupSupportedStages(int) subgroupSupportedStages}. */
    public static void nsubgroupSupportedStages(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.SUBGROUPSUPPORTEDSTAGES, value); }
    /** Unsafe version of {@link #subgroupSupportedOperations(int) subgroupSupportedOperations}. */
    public static void nsubgroupSupportedOperations(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.SUBGROUPSUPPORTEDOPERATIONS, value); }
    /** Unsafe version of {@link #subgroupQuadOperationsInAllStages(boolean) subgroupQuadOperationsInAllStages}. */
    public static void nsubgroupQuadOperationsInAllStages(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.SUBGROUPQUADOPERATIONSINALLSTAGES, value); }
    /** Unsafe version of {@link #pointClippingBehavior(int) pointClippingBehavior}. */
    public static void npointClippingBehavior(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.POINTCLIPPINGBEHAVIOR, value); }
    /** Unsafe version of {@link #maxMultiviewViewCount(int) maxMultiviewViewCount}. */
    public static void nmaxMultiviewViewCount(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.MAXMULTIVIEWVIEWCOUNT, value); }
    /** Unsafe version of {@link #maxMultiviewInstanceIndex(int) maxMultiviewInstanceIndex}. */
    public static void nmaxMultiviewInstanceIndex(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.MAXMULTIVIEWINSTANCEINDEX, value); }
    /** Unsafe version of {@link #protectedNoFault(boolean) protectedNoFault}. */
    public static void nprotectedNoFault(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.PROTECTEDNOFAULT, value); }
    /** Unsafe version of {@link #maxPerSetDescriptors(int) maxPerSetDescriptors}. */
    public static void nmaxPerSetDescriptors(long struct, int value) { UNSAFE.putInt(null, struct + VkPhysicalDeviceVulkan11Properties.MAXPERSETDESCRIPTORS, value); }
    /** Unsafe version of {@link #maxMemoryAllocationSize(long) maxMemoryAllocationSize}. */
    public static void nmaxMemoryAllocationSize(long struct, long value) { UNSAFE.putLong(null, struct + VkPhysicalDeviceVulkan11Properties.MAXMEMORYALLOCATIONSIZE, value); }

    // -----------------------------------

    /** An array of {@link VkPhysicalDeviceVulkan11Properties} structs. */
    public static class Buffer extends StructBuffer<VkPhysicalDeviceVulkan11Properties, Buffer> implements NativeResource {

        private static final VkPhysicalDeviceVulkan11Properties ELEMENT_FACTORY = VkPhysicalDeviceVulkan11Properties.create(-1L);

        /**
         * Creates a new {@code VkPhysicalDeviceVulkan11Properties.Buffer} instance backed by the specified container.
         *
         * Changes to the container's content will be visible to the struct buffer instance and vice versa. The two buffers' position, limit, and mark values
         * will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided
         * by {@link VkPhysicalDeviceVulkan11Properties#SIZEOF}, and its mark will be undefined.
         *
         * <p>The created buffer instance holds a strong reference to the container object.</p>
         */
        public Buffer(ByteBuffer container) {
            super(container, container.remaining() / SIZEOF);
        }

        public Buffer(long address, int cap) {
            super(address, null, -1, 0, cap, cap);
        }

        Buffer(long address, @Nullable ByteBuffer container, int mark, int pos, int lim, int cap) {
            super(address, container, mark, pos, lim, cap);
        }

        @Override
        protected Buffer self() {
            return this;
        }

        @Override
        protected VkPhysicalDeviceVulkan11Properties getElementFactory() {
            return ELEMENT_FACTORY;
        }

        /** Returns the value of the {@code sType} field. */
        @NativeType("VkStructureType")
        public int sType() { return VkPhysicalDeviceVulkan11Properties.nsType(address()); }
        /** Returns the value of the {@code pNext} field. */
        @NativeType("void *")
        public long pNext() { return VkPhysicalDeviceVulkan11Properties.npNext(address()); }
        /** Returns a {@link ByteBuffer} view of the {@code deviceUUID} field. */
        @NativeType("uint8_t[VK_UUID_SIZE]")
        public ByteBuffer deviceUUID() { return VkPhysicalDeviceVulkan11Properties.ndeviceUUID(address()); }
        /** Returns the value at the specified index of the {@code deviceUUID} field. */
        @NativeType("uint8_t")
        public byte deviceUUID(int index) { return VkPhysicalDeviceVulkan11Properties.ndeviceUUID(address(), index); }
        /** Returns a {@link ByteBuffer} view of the {@code driverUUID} field. */
        @NativeType("uint8_t[VK_UUID_SIZE]")
        public ByteBuffer driverUUID() { return VkPhysicalDeviceVulkan11Properties.ndriverUUID(address()); }
        /** Returns the value at the specified index of the {@code driverUUID} field. */
        @NativeType("uint8_t")
        public byte driverUUID(int index) { return VkPhysicalDeviceVulkan11Properties.ndriverUUID(address(), index); }
        /** Returns a {@link ByteBuffer} view of the {@code deviceLUID} field. */
        @NativeType("uint8_t[VK_LUID_SIZE]")
        public ByteBuffer deviceLUID() { return VkPhysicalDeviceVulkan11Properties.ndeviceLUID(address()); }
        /** Returns the value at the specified index of the {@code deviceLUID} field. */
        @NativeType("uint8_t")
        public byte deviceLUID(int index) { return VkPhysicalDeviceVulkan11Properties.ndeviceLUID(address(), index); }
        /** Returns the value of the {@code deviceNodeMask} field. */
        @NativeType("uint32_t")
        public int deviceNodeMask() { return VkPhysicalDeviceVulkan11Properties.ndeviceNodeMask(address()); }
        /** Returns the value of the {@code deviceLUIDValid} field. */
        @NativeType("VkBool32")
        public boolean deviceLUIDValid() { return VkPhysicalDeviceVulkan11Properties.ndeviceLUIDValid(address()) != 0; }
        /** Returns the value of the {@code subgroupSize} field. */
        @NativeType("uint32_t")
        public int subgroupSize() { return VkPhysicalDeviceVulkan11Properties.nsubgroupSize(address()); }
        /** Returns the value of the {@code subgroupSupportedStages} field. */
        @NativeType("VkShaderStageFlags")
        public int subgroupSupportedStages() { return VkPhysicalDeviceVulkan11Properties.nsubgroupSupportedStages(address()); }
        /** Returns the value of the {@code subgroupSupportedOperations} field. */
        @NativeType("VkSubgroupFeatureFlags")
        public int subgroupSupportedOperations() { return VkPhysicalDeviceVulkan11Properties.nsubgroupSupportedOperations(address()); }
        /** Returns the value of the {@code subgroupQuadOperationsInAllStages} field. */
        @NativeType("VkBool32")
        public boolean subgroupQuadOperationsInAllStages() { return VkPhysicalDeviceVulkan11Properties.nsubgroupQuadOperationsInAllStages(address()) != 0; }
        /** Returns the value of the {@code pointClippingBehavior} field. */
        @NativeType("VkPointClippingBehavior")
        public int pointClippingBehavior() { return VkPhysicalDeviceVulkan11Properties.npointClippingBehavior(address()); }
        /** Returns the value of the {@code maxMultiviewViewCount} field. */
        @NativeType("uint32_t")
        public int maxMultiviewViewCount() { return VkPhysicalDeviceVulkan11Properties.nmaxMultiviewViewCount(address()); }
        /** Returns the value of the {@code maxMultiviewInstanceIndex} field. */
        @NativeType("uint32_t")
        public int maxMultiviewInstanceIndex() { return VkPhysicalDeviceVulkan11Properties.nmaxMultiviewInstanceIndex(address()); }
        /** Returns the value of the {@code protectedNoFault} field. */
        @NativeType("VkBool32")
        public boolean protectedNoFault() { return VkPhysicalDeviceVulkan11Properties.nprotectedNoFault(address()) != 0; }
        /** Returns the value of the {@code maxPerSetDescriptors} field. */
        @NativeType("uint32_t")
        public int maxPerSetDescriptors() { return VkPhysicalDeviceVulkan11Properties.nmaxPerSetDescriptors(address()); }
        /** Returns the value of the {@code maxMemoryAllocationSize} field. */
        @NativeType("VkDeviceSize")
        public long maxMemoryAllocationSize() { return VkPhysicalDeviceVulkan11Properties.nmaxMemoryAllocationSize(address()); }

        /** Sets the specified value to the {@code sType} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer sType(@NativeType("VkStructureType") int value) { VkPhysicalDeviceVulkan11Properties.nsType(address(), value); return this; }
        /** Sets the specified value to the {@code pNext} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer pNext(@NativeType("void *") long value) { VkPhysicalDeviceVulkan11Properties.npNext(address(), value); return this; }
        /** Copies the specified {@link ByteBuffer} to the {@code deviceUUID} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer deviceUUID(@NativeType("uint8_t[VK_UUID_SIZE]") ByteBuffer value) { VkPhysicalDeviceVulkan11Properties.ndeviceUUID(address(), value); return this; }
        /** Sets the specified value at the specified index of the {@code deviceUUID} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer deviceUUID(int index, @NativeType("uint8_t") byte value) { VkPhysicalDeviceVulkan11Properties.ndeviceUUID(address(), index, value); return this; }
        /** Copies the specified {@link ByteBuffer} to the {@code driverUUID} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer driverUUID(@NativeType("uint8_t[VK_UUID_SIZE]") ByteBuffer value) { VkPhysicalDeviceVulkan11Properties.ndriverUUID(address(), value); return this; }
        /** Sets the specified value at the specified index of the {@code driverUUID} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer driverUUID(int index, @NativeType("uint8_t") byte value) { VkPhysicalDeviceVulkan11Properties.ndriverUUID(address(), index, value); return this; }
        /** Copies the specified {@link ByteBuffer} to the {@code deviceLUID} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer deviceLUID(@NativeType("uint8_t[VK_LUID_SIZE]") ByteBuffer value) { VkPhysicalDeviceVulkan11Properties.ndeviceLUID(address(), value); return this; }
        /** Sets the specified value at the specified index of the {@code deviceLUID} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer deviceLUID(int index, @NativeType("uint8_t") byte value) { VkPhysicalDeviceVulkan11Properties.ndeviceLUID(address(), index, value); return this; }
        /** Sets the specified value to the {@code deviceNodeMask} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer deviceNodeMask(@NativeType("uint32_t") int value) { VkPhysicalDeviceVulkan11Properties.ndeviceNodeMask(address(), value); return this; }
        /** Sets the specified value to the {@code deviceLUIDValid} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer deviceLUIDValid(@NativeType("VkBool32") boolean value) { VkPhysicalDeviceVulkan11Properties.ndeviceLUIDValid(address(), value ? 1 : 0); return this; }
        /** Sets the specified value to the {@code subgroupSize} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer subgroupSize(@NativeType("uint32_t") int value) { VkPhysicalDeviceVulkan11Properties.nsubgroupSize(address(), value); return this; }
        /** Sets the specified value to the {@code subgroupSupportedStages} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer subgroupSupportedStages(@NativeType("VkShaderStageFlags") int value) { VkPhysicalDeviceVulkan11Properties.nsubgroupSupportedStages(address(), value); return this; }
        /** Sets the specified value to the {@code subgroupSupportedOperations} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer subgroupSupportedOperations(@NativeType("VkSubgroupFeatureFlags") int value) { VkPhysicalDeviceVulkan11Properties.nsubgroupSupportedOperations(address(), value); return this; }
        /** Sets the specified value to the {@code subgroupQuadOperationsInAllStages} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer subgroupQuadOperationsInAllStages(@NativeType("VkBool32") boolean value) { VkPhysicalDeviceVulkan11Properties.nsubgroupQuadOperationsInAllStages(address(), value ? 1 : 0); return this; }
        /** Sets the specified value to the {@code pointClippingBehavior} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer pointClippingBehavior(@NativeType("VkPointClippingBehavior") int value) { VkPhysicalDeviceVulkan11Properties.npointClippingBehavior(address(), value); return this; }
        /** Sets the specified value to the {@code maxMultiviewViewCount} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer maxMultiviewViewCount(@NativeType("uint32_t") int value) { VkPhysicalDeviceVulkan11Properties.nmaxMultiviewViewCount(address(), value); return this; }
        /** Sets the specified value to the {@code maxMultiviewInstanceIndex} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer maxMultiviewInstanceIndex(@NativeType("uint32_t") int value) { VkPhysicalDeviceVulkan11Properties.nmaxMultiviewInstanceIndex(address(), value); return this; }
        /** Sets the specified value to the {@code protectedNoFault} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer protectedNoFault(@NativeType("VkBool32") boolean value) { VkPhysicalDeviceVulkan11Properties.nprotectedNoFault(address(), value ? 1 : 0); return this; }
        /** Sets the specified value to the {@code maxPerSetDescriptors} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer maxPerSetDescriptors(@NativeType("uint32_t") int value) { VkPhysicalDeviceVulkan11Properties.nmaxPerSetDescriptors(address(), value); return this; }
        /** Sets the specified value to the {@code maxMemoryAllocationSize} field. */
        public VkPhysicalDeviceVulkan11Properties.Buffer maxMemoryAllocationSize(@NativeType("VkDeviceSize") long value) { VkPhysicalDeviceVulkan11Properties.nmaxMemoryAllocationSize(address(), value); return this; }

    }

}